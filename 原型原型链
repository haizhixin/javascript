<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <title></title>
</head>

<body>
  <script type="text/javascript">
    //			function Person(name) {
    //				this.name = name;
    //			}
    //			var p = new Person();
    //			console.log(p.__proto__ === Person.prototype); //对象的隐式引用指向了构造器的 prototype 属性， 所以此处打印 true
    //
    //			console.log(Person.prototype.__proto__ === Object.prototype); //原型本身是一个 Object 对象， 所以他的隐式引用指向了 Object 构造器的 prototype 属性 , 故而打印 true
    //
    //			console.log(Person.__proto__ === Function.prototype);// 构造器 Person 本身是一个函数对象，所以此处打印 true

    Father.prototype.hobby = "singthesong"
    // 原型与原型
    function Father() {

    }

    var father = new Father()


    Son.prototype = father
    function Son() {

    }
    var son = new Son()

    // 每一个对象都有一个隐式的_proto_属性 执行该对象的构造函数的原型对象

    son._proto_ = Son.prototype

    Son.prototype = father

    father._proto_ = Father.prototype
    // 所以此时son也就继承了Father的属性

    Father.prototype._proto_ = Object.prototype

    Object.prototype._proto_ = null
    //此时原型链到尽头了 到顶了

    // 每一个对象都有一个隐式的_proto_属性 而js里万物皆对象 函数也是对象  所以函数对象也拥有_proto_属性
    // 另外函数对象也拥有一个普通对象不拥有的prototype
    // 所有的函数对象都是new Function()生成的    凡是通过new Function() 创建的对象都是函数对象,其他的都是普通对象

    // 所以上述构造函数
    Son._proto_ = Function.prototype
    Father._proto_ = Function.prototype

    Function.prototype = 空对象

    // 在默认情况下 所有原型对象都会自动获得一个constructor属性   这个属性是一个指针 指向该原型(prototype)所在的构造函数

    function Person() {
      this.name = "张亚强"
    }
    var person = new Person();


  </script>
</body>

</html>
